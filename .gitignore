# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Log/OS Files
*.log

# Android Studio generated files and folders
captures/
.externalNativeBuild/
.cxx/
*.aab
*.apk
output-metadata.json

# IntelliJ
*.iml
.idea/
misc.xml
deploymentTargetDropDown.xml
render.experimental.xml

# Keystore files
*.jks
*.keystore

# Google Services (e.g. APIs or Firebase)
google-services.json

# Android Profiling
*.hprof

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Splash Force Multiplayer</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(to bottom, #a0eaff, #ffffff);
      overflow: hidden;
    }
    canvas {
      display: block;
      background-color: #e0f7ff;
    }
    #joystick {
      position: absolute;
      bottom: 40px;
      left: 40px;
      width: 100px;
      height: 100px;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      touch-action: none;
    }
    #stick {
      position: absolute;
      width: 40px;
      height: 40px;
      background: #00aaff;
      border-radius: 50%;
      top: 30px;
      left: 30px;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="joystick"><div id="stick"></div></div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Full client-side game logic (same as provided earlier)
    // Includes player movement, joystick, splash shooting, rendering, and Socket.IO events
  </script>
</body>
</html>

const express = require('express');
const http = require('http');
const socketIO = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIO(server);

app.use(express.static(__dirname)); // Serves index.html and assets

let players = {};

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  socket.on('join', ({ username }) => {
    players[socket.id] = { x: 100, y: 500, name: username, score: 0, health: 100 };
    socket.emit('startGame', { name: username });
    io.emit('updatePlayers', players);
  });

  socket.on('splash', (data) => {
    socket.broadcast.emit('splashHit', data);
  });

  socket.on('playerHit', ({ targetId }) => {
    if (players[targetId]) {
      players[targetId].health -= 10;
      if (players[targetId].health <= 0) {
        players[targetId].health = 100;
        players[targetId].score = 0;
      }
      io.emit('updatePlayers', players);
    }
  });

  socket.on('disconnect', () => {
    delete players[socket.id];
    io.emit('updatePlayers', players);
  });
});

server.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});

const express = require('express');
const http = require('http');
const socketIO = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIO(server);

app.use(express.static(__dirname)); // Serves index.html and assets

let players = {};

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  socket.on('join', ({ username }) => {
    players[socket.id] = { x: 100, y: 500, name: username, score: 0, health: 100 };
    socket.emit('startGame', { name: username });
    io.emit('updatePlayers', players);
  });

  socket.on('splash', (data) => {
    socket.broadcast.emit('splashHit', data);
  });

  socket.on('playerHit', ({ targetId }) => {
    if (players[targetId]) {
      players[targetId].health -= 10;
      if (players[targetId].health <= 0) {
        players[targetId].health = 100;
        players[targetId].score = 0;
      }
      io.emit('updatePlayers', players);
    }
  });

  socket.on('disconnect', () => {
    delete players[socket.id];
    io.emit('updatePlayers', players);
  });
});

server.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});
